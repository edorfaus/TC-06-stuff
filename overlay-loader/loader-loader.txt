// This code prefix loads the overlay loader into RAM, and then uses it to load
// your main program. This thus adds support for using the built-in bootloader.

// These registers are used by the overlay loader:
// R15: static: 1
// R14: static*: MOVO instruction (address varies)
// R3: temp: loop max = end address on disk
// R2: input*: source address on disk; temp: loop counter
// R1: temp: data read from disk

// At most 22 words can be used by each overlay section.

OVERLAY overlay_loader_loader

JMP 1 @local:loader_init // Jump to init code, to allow for general bootloaders
one:        DATAC 1
start_addr: DATAC @disk:overlay_loader_code_start
end_addr:   DATAC @disk:overlay_loader_code_end
loader_init: // memory address 4 : built-in bootloader's entry point
MOVI 15 @local:one       // R15=ram[..] : initialize register for math use
MOVI 14 @local:movo      // R14=ram[..] : load the save-to-RAM instruction
MOVI 2 @local:start_addr // R2=ram[..] : start address of loader code
MOVI 3 @local:end_addr   // R3=ram[..] : end address of loader code
loop:
	GETDATA 1 3 2            // R1=read(disk, R2) : read program data from disk
	movo: MOVO 1 22          // ram[22]=R1 : save the data to RAM; addr changes
	MATH 15 2 0              // R2++ : increment disk address
	MATH 15 14 0             // R14++ : increment RAM address
	MOVO 14 @local:movo      // ram[..]=R14 : update the saving instruction
	IFJMP 2 @relative:loop 3 // jump back to loop if R2 < R3
JMP 3 9                // run the overlay loader to load main program overlay

END_OVERLAY

overlay_loader_code_start: // Start of loader code that we will load into RAM.
GETDATA 1 3 2  // R1=read(disk, R2) : read disk address of last instr. to load
MATH 1 3 5     // R3=R1 : set loop max register to that disk address
PMOV 15 14 7 30 1 1 // R14[address]=0 : initialize RAM address
overlay_loader_loop:
	MOVO 14 29    // ram[29]=R14 : update save-to-RAM instruction; loop start
	MATH 15 14 0  // R14++ : increment RAM address
	MATH 15 2 0   // R2++ : increment disk address
	GETDATA 1 3 2 // R1=read(disk, R2) : read program data from disk
	MOVO 1 0      // ram[0]=R1 : save loaded data to RAM; note: self-modified
	IFJMP 2 @relative:overlay_loader_loop: 3 // loop if R2<R3
JMP 1 0        // start the loaded program
overlay_loader_code_end: // End of loader code, and start of your main program
